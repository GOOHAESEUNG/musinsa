{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-room-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-header\"\n};\nconst _hoisted_3 = {\n  class: \"chat-messages\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: $setup.goBack\n  }, \"뒤로가기\"), _createElementVNode(\"h2\", null, _toDisplayString($setup.roomId) + \"번 채팅방\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, (msg, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index\n    }, [_createElementVNode(\"strong\", null, _toDisplayString(msg.senderEmail) + \":\", 1 /* TEXT */), _createTextVNode(\" \" + _toDisplayString(msg.message), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"form\", {\n    onSubmit: _withModifiers($setup.sendMessage, [\"prevent\"]),\n    class: \"chat-input-area\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newMessage = $event),\n    placeholder: \"메시지를 입력하세요\",\n    class: \"chat-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _cache[1] || (_cache[1] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"send-button\"\n  }, \"전송\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","$setup","goBack","_toDisplayString","roomId","_hoisted_3","_Fragment","_renderList","messages","msg","index","key","senderEmail","_createTextVNode","message","onSubmit","_withModifiers","sendMessage","_cache","$event","newMessage","placeholder","type"],"sources":["/Users/haeseung/2025/musinsa_project/musinsa_frontend/src/pages/ChatRoomDetailPage.vue"],"sourcesContent":["<template>\n  <div class=\"chat-room-container\">\n    <header class=\"chat-header\">\n      <button @click=\"goBack\">뒤로가기</button>\n      <h2>{{ roomId }}번 채팅방</h2>\n    </header>\n\n    <div class=\"chat-messages\">\n      <div v-for=\"(msg, index) in messages\" :key=\"index\">\n        <strong>{{ msg.senderEmail }}:</strong> {{ msg.message }}\n      </div>\n    </div>\n\n    <form @submit.prevent=\"sendMessage\" class=\"chat-input-area\">\n      <input\n        v-model=\"newMessage\"\n        placeholder=\"메시지를 입력하세요\"\n        class=\"chat-input\"\n      />\n      <button type=\"submit\" class=\"send-button\">전송</button>\n    </form>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport axios from 'axios'\nimport {\n  connectStompClient,\n  disconnectStompClient,\n  sendMessage as sendStompMessage\n} from '@/utils/stomp'\n\nconst route = useRoute()\nconst router = useRouter()\nconst roomId = route.params.roomId\nconst newMessage = ref('')\nconst messages = ref([])\n\nconst sendMessage = () => {\n  if (newMessage.value.trim() === '') return\n\n  const messageDto = {\n    message: newMessage.value,\n    senderEmail: localStorage.getItem('email'), \n    messageType: \"GENERAL\",\n  }\n\n  sendStompMessage(roomId, messageDto)\n  newMessage.value = ''\n}\n\nconst onMessageReceived = (message) => {\n  messages.value.push(message)\n}\n\nconst goBack = () => {\n  router.back()\n}\n\nonMounted(async () => {\n  try {\n    const response = await axios.get(`/api/chat/history/${roomId}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    })\n    messages.value = response.data\n  } catch (error) {\n    console.error('기존 메시지 로드 실패:', error)\n  }\n\n  connectStompClient(onMessageReceived, roomId)\n})\n\nonUnmounted(() => {\n  disconnectStompClient()\n})\n</script>\n\n<style scoped>\n.chat-room-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 16px;\n}\n\n.chat-header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.chat-messages {\n  flex: 1;\n  border: 1px solid #ddd;\n  padding: 12px;\n  background-color: #fafafa;\n  margin-bottom: 12px;\n}\n\n.chat-input-area {\n  display: flex;\n  gap: 8px;\n}\n\n.chat-input {\n  flex: 1;\n  padding: 8px;\n}\n\n.send-button {\n  padding: 8px 12px;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;EACtBA,KAAK,EAAC;AAAa;;EAKtBA,KAAK,EAAC;AAAe;;uBAN5BC,mBAAA,CAoBM,OApBNC,UAoBM,GAnBJC,mBAAA,CAGS,UAHTC,UAGS,GAFPD,mBAAA,CAAqC;IAA5BE,OAAK,EAAEC,MAAA,CAAAC;EAAM,GAAE,MAAI,GAC5BJ,mBAAA,CAA0B,YAAAK,gBAAA,CAAnBF,MAAA,CAAAG,MAAM,IAAG,OAAK,gB,GAGvBN,mBAAA,CAIM,OAJNO,UAIM,I,kBAHJT,mBAAA,CAEMU,SAAA,QAVZC,WAAA,CAQkCN,MAAA,CAAAO,QAAQ,EAR1C,CAQmBC,GAAG,EAAEC,KAAK;yBAAvBd,mBAAA,CAEM;MAFiCe,GAAG,EAAED;IAAK,IAC/CZ,mBAAA,CAAuC,gBAAAK,gBAAA,CAA5BM,GAAG,CAACG,WAAW,IAAG,GAAC,iBATtCC,gBAAA,CAS+C,GAAC,GAAAV,gBAAA,CAAGM,GAAG,CAACK,OAAO,iB;oCAI1DhB,mBAAA,CAOO;IAPAiB,QAAM,EAbjBC,cAAA,CAa2Bf,MAAA,CAAAgB,WAAW;IAAEtB,KAAK,EAAC;sBACxCG,mBAAA,CAIE;IAlBR,uBAAAoB,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAeiBlB,MAAA,CAAAmB,UAAU,GAAAD,MAAA;IACnBE,WAAW,EAAC,YAAY;IACxB1B,KAAK,EAAC;iDAFGM,MAAA,CAAAmB,UAAU,E,6BAIrBtB,mBAAA,CAAqD;IAA7CwB,IAAI,EAAC,QAAQ;IAAC3B,KAAK,EAAC;KAAc,IAAE,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}