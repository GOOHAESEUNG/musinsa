name: Update Project Status on Label

on:
  issues:
    types: [labeled]
  project_card:
    types: [created]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    steps:
      - name: Check label and update project status
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_PROJECT_TOKEN }}
          script: |
            let label = context.payload.label?.name;
            const issueNumber = context.payload.issue?.number || context.payload.project_card?.content_url?.split('/').pop();
            const repository = context.payload.repository.full_name;
            const [owner, repo] = repository.split('/');

            const PROJECT_NUMBER = 1;
            const LOGIN = 'GOOHAESEUNG';
            const FIELD_ID = 'PVTSSF_lAHOB1FNEc4Asorvzgjhx4s';
            const STATUS_VALUES = {
              "🚧 진행 중": "47fc9ee4",
              "✅ 완료됨": "d0e1aef0" // Updated to the correct ID for "Done"
            };

            try {
              const projectQuery = await github.graphql(`
                query {
                  user(login: "${LOGIN}") {
                    projectV2(number: ${PROJECT_NUMBER}) {
                      id
                    }
                  }
                }
              `);

              const projectId = projectQuery.user.projectV2.id;

              const issueQuery = await github.graphql(`
                query {
                  repository(owner: "${owner}", name: "${repo}") {
                    issue(number: ${issueNumber}) {
                      id
                      title
                      labels(first: 10) {
                        nodes {
                          name
                        }
                      }
                    }
                  }
                }
              `);

              const issue = issueQuery.repository.issue;
              const issueId = issue.id;

              if (!label) {
                const labelNode = issue.labels.nodes.find(l => STATUS_VALUES[l.name]);
                if (labelNode) {
                  label = labelNode.name;
                } else {
                  console.log("⚠️ 처리 대상 라벨이 없습니다.");
                  return;
                }
              }

              if (!STATUS_VALUES[label]) {
                console.log(`⚠️ 처리 대상 라벨이 아닙니다: ${label}`);
                return;
              }

              const itemsQuery = await github.graphql(`
                query {
                  node(id: "${projectId}") {
                    ... on ProjectV2 {
                      items(first: 100) {
                        nodes {
                          id
                          content {
                            ... on Issue {
                              id
                              number
                            }
                          }
                        }
                      }
                    }
                  }
                }
              `);

              const projectItems = itemsQuery.node.items.nodes;
              let matchingItem = projectItems.find(item =>
                item.content && item.content.id === issueId
              );

              if (!matchingItem) {
                const addResult = await github.graphql(`
                  mutation {
                    addProjectV2ItemById(input: {
                      projectId: "${projectId}"
                      contentId: "${issueId}"
                    }) {
                      item {
                        id
                      }
                    }
                  }
                `);
                matchingItem = { id: addResult.addProjectV2ItemById.item.id };
                console.log(`✅ 이슈가 프로젝트에 추가됨: ${matchingItem.id}`);
              }

              const itemId = matchingItem.id;

              await github.graphql(`
                mutation {
                  updateProjectV2ItemFieldValue(
                    input: {
                      projectId: "${projectId}"
                      itemId: "${itemId}"
                      fieldId: "${FIELD_ID}"
                      value: {
                        singleSelectOptionId: "${STATUS_VALUES[label]}"
                      }
                    }
                  ) {
                    projectV2Item {
                      id
                    }
                  }
                }
              `);

              console.log(`✅ 항목 상태가 '${label}'로 업데이트됨`);
            } catch (error) {
              console.error("❌ 오류 발생:", error);
            }