{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { useRoute, useRouter } from 'vue-router';\nimport axios from 'axios';\nimport { connectStompClient, disconnectStompClient, sendMessage as sendStompMessage } from '@/utils/stomp';\nexport default {\n  __name: 'ChatRoomDetailPage',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const route = useRoute();\n    const router = useRouter();\n    const roomId = route.params.roomId;\n    const newMessage = ref('');\n    const messages = ref([]);\n    const myEmail = localStorage.getItem('email') || '';\n    const sendMessage = () => {\n      if (newMessage.value.trim() === '') return;\n      const messageDto = {\n        message: newMessage.value,\n        senderEmail: localStorage.getItem('email'),\n        messageType: \"GENERAL\"\n      };\n      sendStompMessage(roomId, messageDto);\n      newMessage.value = '';\n    };\n    const onMessageReceived = message => {\n      messages.value.push(message);\n    };\n    const goBack = () => {\n      router.back();\n    };\n    onMounted(async () => {\n      try {\n        const response = await axios.get(`/api/chat/history/${roomId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`\n          }\n        });\n        messages.value = response.data;\n      } catch (error) {\n        console.error('기존 메시지 로드 실패:', error);\n      }\n      connectStompClient(onMessageReceived, roomId);\n    });\n    onUnmounted(() => {\n      disconnectStompClient();\n    });\n    const __returned__ = {\n      route,\n      router,\n      roomId,\n      newMessage,\n      messages,\n      myEmail,\n      sendMessage,\n      onMessageReceived,\n      goBack,\n      ref,\n      onMounted,\n      onUnmounted,\n      get useRoute() {\n        return useRoute;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      get axios() {\n        return axios;\n      },\n      get connectStompClient() {\n        return connectStompClient;\n      },\n      get disconnectStompClient() {\n        return disconnectStompClient;\n      },\n      get sendStompMessage() {\n        return sendStompMessage;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","onUnmounted","useRoute","useRouter","axios","connectStompClient","disconnectStompClient","sendMessage","sendStompMessage","route","router","roomId","params","newMessage","messages","myEmail","localStorage","getItem","value","trim","messageDto","message","senderEmail","messageType","onMessageReceived","push","goBack","back","response","get","headers","Authorization","data","error","console"],"sources":["/Users/haeseung/2025/musinsa_project/musinsa_frontend/src/pages/ChatRoomDetailPage.vue"],"sourcesContent":["<template>\n  <div class=\"chat-room-container\">\n    <header class=\"chat-header\">\n      <button @click=\"goBack\">뒤로가기</button>\n      <h2>{{ roomId }}번 채팅방</h2>\n    </header>\n\n    <div class=\"chat-messages\">\n      <div\n        v-for=\"(msg, index) in messages\"\n        :key=\"index\"\n        class=\"chat-message-wrapper\"\n        :class=\"msg.senderEmail === myEmail ? 'sent-wrapper' : 'received-wrapper'\"\n      >\n        <div class=\"sender-name\">{{ msg.senderName }}</div>\n        <div\n          :class=\"[\n            'chat-message',\n            msg.senderEmail === myEmail ? 'sent' : 'received'\n          ]\"\n        >\n          <div class=\"message-text\">{{ msg.message }}</div>\n        </div>\n      </div>\n    </div>\n\n    <form @submit.prevent=\"sendMessage\" class=\"chat-input-area\">\n      <input\n        v-model=\"newMessage\"\n        placeholder=\"메시지를 입력하세요\"\n        class=\"chat-input\"\n      />\n      <button type=\"submit\" class=\"send-button\">전송</button>\n    </form>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport axios from 'axios'\nimport {\n  connectStompClient,\n  disconnectStompClient,\n  sendMessage as sendStompMessage\n} from '@/utils/stomp'\n\nconst route = useRoute()\nconst router = useRouter()\nconst roomId = route.params.roomId\nconst newMessage = ref('')\nconst messages = ref([])\n\nconst myEmail = localStorage.getItem('email') || ''\n\nconst sendMessage = () => {\n  if (newMessage.value.trim() === '') return\n\n  const messageDto = {\n    message: newMessage.value,\n    senderEmail: localStorage.getItem('email'), \n    messageType: \"GENERAL\",\n  }\n\n  sendStompMessage(roomId, messageDto)\n  newMessage.value = ''\n}\n\nconst onMessageReceived = (message) => {\n  messages.value.push(message)\n}\n\nconst goBack = () => {\n  router.back()\n}\n\nonMounted(async () => {\n  try {\n    const response = await axios.get(`/api/chat/history/${roomId}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    })\n    messages.value = response.data\n  } catch (error) {\n    console.error('기존 메시지 로드 실패:', error)\n  }\n\n  connectStompClient(onMessageReceived, roomId)\n})\n\nonUnmounted(() => {\n  disconnectStompClient()\n})\n</script>\n\n<style scoped>\n.chat-room-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 16px;\n}\n\n.chat-header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.chat-messages {\n  display: flex;\n  flex-direction: column;\n  flex: 1;\n  border: 1px solid #ddd;\n  padding: 12px;\n  background-color: #fafafa;\n  margin-bottom: 12px;\n  overflow-y: auto;\n}\n\n.chat-input-area {\n  display: flex;\n  gap: 8px;\n}\n\n.chat-input {\n  flex: 1;\n  padding: 8px;\n}\n\n.send-button {\n  padding: 8px 12px;\n}\n\n.chat-message {\n  margin: 4px 0;\n  max-width: 70%;\n  padding: 8px;\n  border-radius: 8px;\n  word-break: break-word;\n}\n\n.sent {\n  align-self: flex-end;\n  background-color: #d1e7dd;\n  text-align: right;\n}\n\n.received {\n  align-self: flex-start;\n  background-color: #f8d7da;\n  text-align: left;\n}\n\n.chat-message-wrapper {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 8px;\n}\n\n.sender-name {\n  font-size: 0.75rem;\n  color: #666;\n  margin: 0 8px 2px;\n}\n\n.sent-wrapper {\n  align-items: flex-end;\n}\n\n.received-wrapper {\n  align-items: flex-start;\n}\n\n.message-text {\n  white-space: pre-wrap;\n}\n</style>"],"mappings":";AAsCA,SAASA,GAAG,EAAEC,SAAS,EAAEC,WAAW,QAAQ,KAAI;AAChD,SAASC,QAAQ,EAAEC,SAAS,QAAQ,YAAW;AAC/C,OAAOC,KAAK,MAAM,OAAM;AACxB,SACEC,kBAAkB,EAClBC,qBAAqB,EACrBC,WAAW,IAAIC,gBAAe,QACzB,eAAc;;;;;;;IAErB,MAAMC,KAAK,GAAGP,QAAQ,CAAC;IACvB,MAAMQ,MAAM,GAAGP,SAAS,CAAC;IACzB,MAAMQ,MAAM,GAAGF,KAAK,CAACG,MAAM,CAACD,MAAK;IACjC,MAAME,UAAU,GAAGd,GAAG,CAAC,EAAE;IACzB,MAAMe,QAAQ,GAAGf,GAAG,CAAC,EAAE;IAEvB,MAAMgB,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAC;IAElD,MAAMV,WAAW,GAAGA,CAAA,KAAM;MACxB,IAAIM,UAAU,CAACK,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MAEpC,MAAMC,UAAU,GAAG;QACjBC,OAAO,EAAER,UAAU,CAACK,KAAK;QACzBI,WAAW,EAAEN,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QAC1CM,WAAW,EAAE;MACf;MAEAf,gBAAgB,CAACG,MAAM,EAAES,UAAU;MACnCP,UAAU,CAACK,KAAK,GAAG,EAAC;IACtB;IAEA,MAAMM,iBAAiB,GAAIH,OAAO,IAAK;MACrCP,QAAQ,CAACI,KAAK,CAACO,IAAI,CAACJ,OAAO;IAC7B;IAEA,MAAMK,MAAM,GAAGA,CAAA,KAAM;MACnBhB,MAAM,CAACiB,IAAI,CAAC;IACd;IAEA3B,SAAS,CAAC,YAAY;MACpB,IAAI;QACF,MAAM4B,QAAQ,GAAG,MAAMxB,KAAK,CAACyB,GAAG,CAAC,qBAAqBlB,MAAM,EAAE,EAAE;UAC9DmB,OAAO,EAAE;YACPC,aAAa,EAAE,UAAUf,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;UACxD;QACF,CAAC;QACDH,QAAQ,CAACI,KAAK,GAAGU,QAAQ,CAACI,IAAG;MAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEA,KAAK;MACtC;MAEA5B,kBAAkB,CAACmB,iBAAiB,EAAEb,MAAM;IAC9C,CAAC;IAEDV,WAAW,CAAC,MAAM;MAChBK,qBAAqB,CAAC;IACxB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}