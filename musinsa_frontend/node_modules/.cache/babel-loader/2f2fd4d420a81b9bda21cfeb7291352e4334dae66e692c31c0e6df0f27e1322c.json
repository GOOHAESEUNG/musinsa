{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-room-container\"\n};\nconst _hoisted_2 = {\n  class: \"chat-header\"\n};\nconst _hoisted_3 = {\n  class: \"chat-messages\"\n};\nconst _hoisted_4 = {\n  key: 0,\n  class: \"sender-name\"\n};\nconst _hoisted_5 = {\n  class: \"message-line\"\n};\nconst _hoisted_6 = {\n  class: \"message-text\"\n};\nconst _hoisted_7 = {\n  class: \"message-time-inline\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"header\", _hoisted_2, [_createElementVNode(\"button\", {\n    onClick: $setup.goBack,\n    class: \"back-button\"\n  }, \"←\"), _createElementVNode(\"h2\", null, _toDisplayString($setup.roomId) + \"번 채팅방\", 1 /* TEXT */)]), _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($setup.messages, (msg, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"chat-message-wrapper\", msg.senderEmail === $setup.myEmail ? 'sent-wrapper' : 'received-wrapper'])\n    }, [msg.senderEmail !== $setup.myEmail ? (_openBlock(), _createElementBlock(\"div\", _hoisted_4, _toDisplayString(msg.senderName), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n      class: _normalizeClass(['chat-message', msg.senderEmail === $setup.myEmail ? 'sent' : 'received'])\n    }, [_createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"div\", _hoisted_6, _toDisplayString(msg.message), 1 /* TEXT */), _createElementVNode(\"div\", _hoisted_7, _toDisplayString($setup.formatTime(msg.sendDate)), 1 /* TEXT */)])], 2 /* CLASS */), _createCommentVNode(\"\\n        <div\\n          v-if=\\\"index === messages.length - 1 || !isSameSendTime(msg.sendDate, messages[index + 1]?.sendDate)\\\"\\n          class=\\\"message-time\\\"\\n        >\\n          {{ formatTime(msg.sendDate) }}\\n        </div>\\n        \")], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"form\", {\n    onSubmit: _withModifiers($setup.sendMessage, [\"prevent\"]),\n    class: \"chat-input-area\"\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.newMessage = $event),\n    placeholder: \"메시지를 입력하세요\",\n    class: \"chat-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $setup.newMessage]]), _cache[1] || (_cache[1] = _createElementVNode(\"button\", {\n    type: \"submit\",\n    class: \"send-button\"\n  }, \"전송\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","onClick","$setup","goBack","_toDisplayString","roomId","_hoisted_3","_Fragment","_renderList","messages","msg","index","_normalizeClass","senderEmail","myEmail","_hoisted_4","senderName","_createCommentVNode","_hoisted_5","_hoisted_6","message","_hoisted_7","formatTime","sendDate","onSubmit","_withModifiers","sendMessage","_cache","$event","newMessage","placeholder","type"],"sources":["/Users/haeseung/2025/musinsa_project/musinsa_frontend/src/pages/ChatRoomDetailPage.vue"],"sourcesContent":["<template>\n  <div class=\"chat-room-container\">\n    <header class=\"chat-header\">\n      <button @click=\"goBack\" class=\"back-button\">←</button>\n      <h2>{{ roomId }}번 채팅방</h2>\n    </header>\n\n    <div class=\"chat-messages\">\n      <div\n        v-for=\"(msg, index) in messages\"\n        :key=\"index\"\n        class=\"chat-message-wrapper\"\n        :class=\"msg.senderEmail === myEmail ? 'sent-wrapper' : 'received-wrapper'\"\n      >\n        <div v-if=\"msg.senderEmail !== myEmail\" class=\"sender-name\">{{ msg.senderName }}</div>\n        <div\n          :class=\"[\n            'chat-message',\n            msg.senderEmail === myEmail ? 'sent' : 'received'\n          ]\"\n        >\n          <div class=\"message-line\">\n            <div class=\"message-text\">{{ msg.message }}</div>\n            <div class=\"message-time-inline\">{{ formatTime(msg.sendDate) }}</div>\n          </div>\n        </div>\n        <!--\n        <div\n          v-if=\"index === messages.length - 1 || !isSameSendTime(msg.sendDate, messages[index + 1]?.sendDate)\"\n          class=\"message-time\"\n        >\n          {{ formatTime(msg.sendDate) }}\n        </div>\n        -->\n      </div>\n    </div>\n\n    <form @submit.prevent=\"sendMessage\" class=\"chat-input-area\">\n      <input\n        v-model=\"newMessage\"\n        placeholder=\"메시지를 입력하세요\"\n        class=\"chat-input\"\n      />\n      <button type=\"submit\" class=\"send-button\">전송</button>\n    </form>\n  </div>\n</template>\n\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue'\nimport { useRoute, useRouter } from 'vue-router'\nimport axios from 'axios'\nimport {\n  connectStompClient,\n  disconnectStompClient,\n  sendMessage as sendStompMessage\n} from '@/utils/stomp'\n\nconst route = useRoute()\nconst router = useRouter()\nconst roomId = route.params.roomId\nconst newMessage = ref('')\nconst messages = ref([])\n\nconst myEmail = localStorage.getItem('email') || ''\n\nconst sendMessage = () => {\n  if (newMessage.value.trim() === '') return\n\n  const messageDto = {\n    message: newMessage.value,\n    senderEmail: localStorage.getItem('email'), \n    messageType: \"GENERAL\",\n  }\n\n  sendStompMessage(roomId, messageDto)\n  newMessage.value = ''\n}\n\nconst onMessageReceived = (message) => {\n  messages.value.push(message)\n}\n\nconst goBack = () => {\n  router.back()\n}\n\nconst formatTime = (datetime) => {\n  if (!datetime) {\n    console.warn('formatTime: datetime is undefined or null')\n    return ''\n  }\n  console.log('Formatting time for:', datetime)\n  const date = new Date(datetime)\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\n}\n\nconst isSameSendTime = (current, previous) => {\n  if (!current || !previous) return false\n  const a = new Date(current)\n  const b = new Date(previous)\n  return (\n    a.getHours() === b.getHours() &&\n    a.getMinutes() === b.getMinutes()\n  )\n}\n\nonMounted(async () => {\n  try {\n    const response = await axios.get(`/api/chat/history/${roomId}`, {\n      headers: {\n        Authorization: `Bearer ${localStorage.getItem('token')}`\n      }\n    })\n    messages.value = response.data\n  } catch (error) {\n    console.error('기존 메시지 로드 실패:', error)\n  }\n\n  connectStompClient(onMessageReceived, roomId)\n})\n\nonUnmounted(() => {\n  disconnectStompClient()\n})\n</script>\n\n<style scoped>\n.chat-room-container {\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  padding: 16px;\n}\n\n.chat-header {\n  display: flex;\n  align-items: center;\n  gap: 12px;\n  margin-bottom: 12px;\n}\n\n.chat-messages {\n  display: flex;\n  flex-direction: column;\n  height: 400px;\n  border: 1px solid #ddd;\n  padding: 12px;\n  background-color: #fafafa;\n  margin-bottom: 12px;\n  overflow-y: auto;\n}\n\n.chat-input-area {\n  display: flex;\n  gap: 8px;\n  padding: 12px;\n  background-color: #ffffff;\n  border-top: 1px solid #ddd;\n}\n\n.chat-input {\n  flex: 1;\n  padding: 10px 14px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 20px;\n  outline: none;\n}\n\n.chat-input:focus {\n  border-color: #222;\n}\n\n.send-button {\n  padding: 10px 16px;\n  font-size: 14px;\n  border: none;\n  background-color: #444;\n  color: #fff;\n  border-radius: 20px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.send-button:hover {\n  background-color: #222;\n}\n\n.chat-message {\n  padding: 10px 14px;\n  border-radius: 12px;\n  max-width: 60%;\n  font-size: 13px;\n  line-height: 1.6;\n  box-shadow: 0 1px 2px rgba(0,0,0,0.06);\n}\n\n.sent {\n  background-color: #e6f0ff; /* 연파랑 */\n}\n\n.received {\n  background-color: #f1f1f1; /* 연회색 */\n}\n\n.chat-message-wrapper {\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 8px;\n}\n\n.sender-name {\n  font-size: 0.75rem;\n  color: #666;\n  margin: 0 8px 2px;\n}\n\n.sent-wrapper {\n  align-items: flex-end;\n}\n\n.received-wrapper {\n  align-items: flex-start;\n}\n\n.message-text {\n  white-space: pre-wrap;\n}\n\n/*\n.message-time {\n  font-size: 0.7rem;\n  color: #999;\n  margin-top: 4px;\n  text-align: right;\n}\n*/\n\n.message-line {\n  display: flex;\n  align-items: flex-end;\n  gap: 8px;\n}\n\n.message-time-inline {\n  font-size: 0.7rem;\n  color: #999;\n  white-space: nowrap;\n}\n\n.back-button {\n  padding: 6px 12px;\n  font-size: 14px;\n  background-color: #f2f2f2;\n  border: 1px solid #ccc;\n  color: #333;\n  border-radius: 6px;\n  cursor: pointer;\n  transition: background-color 0.2s ease;\n}\n\n.back-button:hover {\n  background-color: #e0e0e0;\n}\n</style>"],"mappings":";;EACOA,KAAK,EAAC;AAAqB;;EACtBA,KAAK,EAAC;AAAa;;EAKtBA,KAAK,EAAC;AAAe;;EAP9BC,GAAA;EAcgDD,KAAK,EAAC;;;EAOvCA,KAAK,EAAC;AAAc;;EAClBA,KAAK,EAAC;AAAc;;EACpBA,KAAK,EAAC;AAAqB;;uBAtB1CE,mBAAA,CA4CM,OA5CNC,UA4CM,GA3CJC,mBAAA,CAGS,UAHTC,UAGS,GAFPD,mBAAA,CAAsD;IAA7CE,OAAK,EAAEC,MAAA,CAAAC,MAAM;IAAER,KAAK,EAAC;KAAc,GAAC,GAC7CI,mBAAA,CAA0B,YAAAK,gBAAA,CAAnBF,MAAA,CAAAG,MAAM,IAAG,OAAK,gB,GAGvBN,mBAAA,CA4BM,OA5BNO,UA4BM,I,kBA3BJT,mBAAA,CA0BMU,SAAA,QAlCZC,WAAA,CAS+BN,MAAA,CAAAO,QAAQ,EATvC,CASgBC,GAAG,EAAEC,KAAK;yBADpBd,mBAAA,CA0BM;MAxBHD,GAAG,EAAEe,KAAK;MACXhB,KAAK,EAXbiB,eAAA,EAWc,sBAAsB,EACpBF,GAAG,CAACG,WAAW,KAAKX,MAAA,CAAAY,OAAO;QAExBJ,GAAG,CAACG,WAAW,KAAKX,MAAA,CAAAY,OAAO,I,cAAtCjB,mBAAA,CAAsF,OAAtFkB,UAAsF,EAAAX,gBAAA,CAAvBM,GAAG,CAACM,UAAU,oBAdrFC,mBAAA,gBAeQlB,mBAAA,CAUM;MATHJ,KAAK,EAhBhBiB,eAAA,E,gBAgB4DF,GAAG,CAACG,WAAW,KAAKX,MAAA,CAAAY,OAAO,uB;QAK7Ef,mBAAA,CAGM,OAHNmB,UAGM,GAFJnB,mBAAA,CAAiD,OAAjDoB,UAAiD,EAAAf,gBAAA,CAApBM,GAAG,CAACU,OAAO,kBACxCrB,mBAAA,CAAqE,OAArEsB,UAAqE,EAAAjB,gBAAA,CAAjCF,MAAA,CAAAoB,UAAU,CAACZ,GAAG,CAACa,QAAQ,kB,oBAG/DN,mBAAA,qPAOG,C;oCAIPlB,mBAAA,CAOO;IAPAyB,QAAM,EArCjBC,cAAA,CAqC2BvB,MAAA,CAAAwB,WAAW;IAAE/B,KAAK,EAAC;sBACxCI,mBAAA,CAIE;IA1CR,uBAAA4B,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAuCiB1B,MAAA,CAAA2B,UAAU,GAAAD,MAAA;IACnBE,WAAW,EAAC,YAAY;IACxBnC,KAAK,EAAC;iDAFGO,MAAA,CAAA2B,UAAU,E,6BAIrB9B,mBAAA,CAAqD;IAA7CgC,IAAI,EAAC,QAAQ;IAACpC,KAAK,EAAC;KAAc,IAAE,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}