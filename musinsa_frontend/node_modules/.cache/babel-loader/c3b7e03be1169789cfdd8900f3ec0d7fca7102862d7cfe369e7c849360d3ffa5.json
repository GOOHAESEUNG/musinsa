{"ast":null,"code":"// New file: src/utils/stomp.js\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\nlet stompClient = null;\nexport const connectStompClient = (onMessageReceived, roomId) => {\n  const socket = new SockJS('http://localhost:8080/connect'); // 서버 주소에 따라 수정 필요\n  stompClient = Stomp.over(socket);\n  const token = localStorage.getItem('token');\n  stompClient.connect({\n    Authorization: `Bearer ${token}`\n  }, () => {\n    console.log('🟢 STOMP connected');\n    stompClient.subscribe(`/topic/${roomId}`, message => {\n      onMessageReceived(JSON.parse(message.body));\n    });\n  }, error => {\n    console.error('🔴 STOMP connection error:', error);\n  });\n};\nexport const sendMessage = (roomId, messageDto) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(`/publish/${roomId}`, {}, JSON.stringify(messageDto));\n  }\n};\nexport const disconnectStompClient = () => {\n  if (stompClient !== null) {\n    stompClient.disconnect(() => {\n      console.log('🔌 STOMP disconnected');\n    });\n  }\n};","map":{"version":3,"names":["SockJS","Stomp","stompClient","connectStompClient","onMessageReceived","roomId","socket","over","token","localStorage","getItem","connect","Authorization","console","log","subscribe","message","JSON","parse","body","error","sendMessage","messageDto","connected","send","stringify","disconnectStompClient","disconnect"],"sources":["/Users/haeseung/2025/musinsa_project/musinsa_frontend/src/utils/stomp.js"],"sourcesContent":["\n// New file: src/utils/stomp.js\nimport SockJS from 'sockjs-client'\nimport { Stomp } from '@stomp/stompjs'\n\nlet stompClient = null\n\nexport const connectStompClient = (onMessageReceived, roomId) => {\n  const socket = new SockJS('http://localhost:8080/connect') // 서버 주소에 따라 수정 필요\n  stompClient = Stomp.over(socket)\n\n  const token = localStorage.getItem('token')\n\n  stompClient.connect(\n    {\n      Authorization: `Bearer ${token}`\n    },\n    () => {\n      console.log('🟢 STOMP connected')\n      stompClient.subscribe(`/topic/${roomId}`, (message) => {\n        onMessageReceived(JSON.parse(message.body))\n      })\n    },\n    (error) => {\n      console.error('🔴 STOMP connection error:', error)\n    }\n  )\n}\n\nexport const sendMessage = (roomId, messageDto) => {\n  if (stompClient && stompClient.connected) {\n    stompClient.send(`/publish/${roomId}`, {}, JSON.stringify(messageDto))\n  }\n}\n\nexport const disconnectStompClient = () => {\n  if (stompClient !== null) {\n    stompClient.disconnect(() => {\n      console.log('🔌 STOMP disconnected')\n    })\n  }\n}"],"mappings":"AACA;AACA,OAAOA,MAAM,MAAM,eAAe;AAClC,SAASC,KAAK,QAAQ,gBAAgB;AAEtC,IAAIC,WAAW,GAAG,IAAI;AAEtB,OAAO,MAAMC,kBAAkB,GAAGA,CAACC,iBAAiB,EAAEC,MAAM,KAAK;EAC/D,MAAMC,MAAM,GAAG,IAAIN,MAAM,CAAC,+BAA+B,CAAC,EAAC;EAC3DE,WAAW,GAAGD,KAAK,CAACM,IAAI,CAACD,MAAM,CAAC;EAEhC,MAAME,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAE3CR,WAAW,CAACS,OAAO,CACjB;IACEC,aAAa,EAAE,UAAUJ,KAAK;EAChC,CAAC,EACD,MAAM;IACJK,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;IACjCZ,WAAW,CAACa,SAAS,CAAC,UAAUV,MAAM,EAAE,EAAGW,OAAO,IAAK;MACrDZ,iBAAiB,CAACa,IAAI,CAACC,KAAK,CAACF,OAAO,CAACG,IAAI,CAAC,CAAC;IAC7C,CAAC,CAAC;EACJ,CAAC,EACAC,KAAK,IAAK;IACTP,OAAO,CAACO,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;EACpD,CACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,WAAW,GAAGA,CAAChB,MAAM,EAAEiB,UAAU,KAAK;EACjD,IAAIpB,WAAW,IAAIA,WAAW,CAACqB,SAAS,EAAE;IACxCrB,WAAW,CAACsB,IAAI,CAAC,YAAYnB,MAAM,EAAE,EAAE,CAAC,CAAC,EAAEY,IAAI,CAACQ,SAAS,CAACH,UAAU,CAAC,CAAC;EACxE;AACF,CAAC;AAED,OAAO,MAAMI,qBAAqB,GAAGA,CAAA,KAAM;EACzC,IAAIxB,WAAW,KAAK,IAAI,EAAE;IACxBA,WAAW,CAACyB,UAAU,CAAC,MAAM;MAC3Bd,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IACtC,CAAC,CAAC;EACJ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}